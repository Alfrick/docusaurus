/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
  generate,
  escapePath,
  DEFAULT_CONFIG_FILE_NAME,
} from '@docusaurus/utils';
import type {
  CodeTranslations,
  DocusaurusConfig,
  GlobalData,
  I18n,
  SiteMetadata,
} from '@docusaurus/types';
import type {LoadedRoutes} from './routes';

const genWarning = ({generatedFilesDir}: {generatedFilesDir: string}) =>
  generate(
    generatedFilesDir,
    // cSpell:ignore DONT
    'DONT-EDIT-THIS-FOLDER',
    `This folder stores temp files that Docusaurus' client bundler accesses.

DO NOT hand-modify files in this folder because they will be overwritten in the
next build. You can clear all build artifacts (including this folder) with the
\`docusaurus clear\` command.
`,
  );

const genSiteConfig = ({
  generatedFilesDir,
  siteConfig,
}: {
  generatedFilesDir: string;
  siteConfig: DocusaurusConfig;
}) =>
  generate(
    generatedFilesDir,
    `${DEFAULT_CONFIG_FILE_NAME}.mjs`,
    `/*
 * AUTOGENERATED - DON'T EDIT
 * Your edits in this file will be overwritten in the next build!
 * Modify the docusaurus.config.js file at your site's root instead.
 */
export default ${JSON.stringify(siteConfig, null, 2)};
`,
  );

const genClientModules = ({
  generatedFilesDir,
  clientModules,
}: {
  generatedFilesDir: string;
  clientModules: string[];
}) =>
  generate(
    generatedFilesDir,
    'client-modules.js',
    `export default [
${clientModules
  // Use `require()` because `import()` is async but client modules can have CSS
  // and the order matters for loading CSS.
  .map((clientModule) => `  require("${escapePath(clientModule)}"),`)
  .join('\n')}
];
`,
  );

const genRegistry = ({
  generatedFilesDir,
  registry,
}: {
  generatedFilesDir: string;
  registry: LoadedRoutes['registry'];
}) =>
  generate(
    generatedFilesDir,
    'registry.js',
    `export default {
${Object.entries(registry)
  .sort((a, b) => a[0].localeCompare(b[0]))
  .map(
    ([chunkName, modulePath]) =>
      // modulePath is already escaped by escapePath
      `  "${chunkName}": [() => import(/* webpackChunkName: "${chunkName}" */ "${modulePath}"), "${modulePath}", require.resolveWeak("${modulePath}")],`,
  )
  .join('\n')}};
`,
  );

const genRoutesChunkNames = ({
  generatedFilesDir,
  routesChunkNames,
}: {
  generatedFilesDir: string;
  routesChunkNames: LoadedRoutes['routesChunkNames'];
}) =>
  generate(
    generatedFilesDir,
    'routesChunkNames.json',
    JSON.stringify(routesChunkNames, null, 2),
  );

const genRoutes = ({
  generatedFilesDir,
  routesConfig,
}: {
  generatedFilesDir: string;
  routesConfig: LoadedRoutes['routesConfig'];
}) => generate(generatedFilesDir, 'routes.js', routesConfig);

const genGlobalData = ({
  generatedFilesDir,
  globalData,
}: {
  generatedFilesDir: string;
  globalData: GlobalData;
}) =>
  generate(
    generatedFilesDir,
    'globalData.json',
    JSON.stringify(globalData, null, 2),
  );

const genI18n = ({
  generatedFilesDir,
  i18n,
}: {
  generatedFilesDir: string;
  i18n: I18n;
}) => generate(generatedFilesDir, 'i18n.json', JSON.stringify(i18n, null, 2));

const genCodeTranslations = ({
  generatedFilesDir,
  codeTranslations,
}: {
  generatedFilesDir: string;
  codeTranslations: CodeTranslations;
}) =>
  generate(
    generatedFilesDir,
    'codeTranslations.json',
    JSON.stringify(codeTranslations, null, 2),
  );

const genSiteMetadata = ({
  generatedFilesDir,
  siteMetadata,
}: {
  generatedFilesDir: string;
  siteMetadata: SiteMetadata;
}) =>
  generate(
    generatedFilesDir,
    'site-metadata.json',
    JSON.stringify(siteMetadata, null, 2),
  );

type CodegenParams = {
  generatedFilesDir: string;
  siteConfig: DocusaurusConfig;
  clientModules: string[];
  registry: LoadedRoutes['registry'];
  routesChunkNames: LoadedRoutes['routesChunkNames'];
  routesConfig: LoadedRoutes['routesConfig'];
  globalData: GlobalData;
  i18n: I18n;
  codeTranslations: CodeTranslations;
  siteMetadata: SiteMetadata;
};

export async function generateSiteCode(params: CodegenParams): Promise<void> {
  await Promise.all([
    genWarning(params),
    genClientModules(params),
    genSiteConfig(params),
    genRegistry(params),
    genRoutesChunkNames(params),
    genRoutes(params),
    genGlobalData(params),
    genSiteMetadata(params),
    genI18n(params),
    genCodeTranslations(params),
  ]);
}
